{
	"name": "ProductdatabasetogoldSalesOrder",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "Datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sourceSilver"
				},
				{
					"linkedService": {
						"referenceName": "Datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sinkFilesource"
				},
				{
					"linkedService": {
						"referenceName": "Datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sinkpurchaseAddress"
				},
				{
					"linkedService": {
						"referenceName": "Datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sinkProduct"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "Datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sinkorderfact"
				}
			],
			"transformations": [
				{
					"name": "joinFileSource"
				},
				{
					"name": "joinPurchaseAddress"
				},
				{
					"name": "joinProduct"
				},
				{
					"name": "Salesordercolumn"
				},
				{
					"name": "derviedcolumnorderamount"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OrderID as integer,",
				"          Product as string,",
				"          QuantityOrdered as integer,",
				"          PriceEach as double,",
				"          OrderDate as timestamp,",
				"          PurchaseStreet as string,",
				"          Purchasecity as string,",
				"          PurchaseState as string,",
				"          PurchaseZipcode as string,",
				"          Filename as string,",
				"          LoadDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'datalake',",
				"     wildcardPaths:['Silver/ProductDatabase/']) ~> sourceSilver",
				"source(output(",
				"          Filename as string,",
				"          LoadDate as date,",
				"          FilestoreID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'datalake',",
				"     wildcardPaths:['Gold/ProductDatabase/Filestore']) ~> sinkFilesource",
				"source(output(",
				"          PurchaseStreet as string,",
				"          Purchasecity as string,",
				"          PurchaseState as string,",
				"          PurchaseZipcode as string,",
				"          PurchaseAddressID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'datalake',",
				"     wildcardPaths:['Gold/ProductDatabase/PurchaseAddress/']) ~> sinkpurchaseAddress",
				"source(output(",
				"          Product as string,",
				"          PriceEach as double,",
				"          ProductID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'datalake',",
				"     wildcardPaths:['Gold/ProductDatabase/Product/']) ~> sinkProduct",
				"sourceSilver, sinkFilesource join(sourceSilver@Filename == sinkFilesource@Filename",
				"     && sourceSilver@LoadDate == sinkFilesource@LoadDate,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFileSource",
				"joinFileSource, sinkpurchaseAddress join(sourceSilver@PurchaseStreet == sinkpurchaseAddress@PurchaseStreet",
				"     && sourceSilver@Purchasecity == sinkpurchaseAddress@Purchasecity",
				"     && sourceSilver@PurchaseState == sinkpurchaseAddress@PurchaseState",
				"     && sourceSilver@PurchaseZipcode == sinkpurchaseAddress@PurchaseZipcode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPurchaseAddress",
				"joinPurchaseAddress, sinkProduct join(sourceSilver@Product == sinkProduct@Product,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProduct",
				"derviedcolumnorderamount select(mapColumn(",
				"          OrderID,",
				"          ProductID,",
				"          OrderDate,",
				"          QuantityOrdered,",
				"          PriceEach = sourceSilver@PriceEach,",
				"          OrderAmount,",
				"          PurchaseAddressID,",
				"          FilestoreID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Salesordercolumn",
				"joinProduct derive(OrderAmount = toFloat(QuantityOrdered * sourceSilver@PriceEach)) ~> derviedcolumnorderamount",
				"Salesordercolumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'datalake',",
				"     folderPath: 'Gold/ProductDatabase/Salesorderfact',",
				"     truncate: true,",
				"     partitionFileNames:['Salerorderfact.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkorderfact"
			]
		}
	}
}