{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFproj1new"
		},
		"AzureSqlDatawarehouse_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatawarehouse'"
		},
		"Datalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Datalake'"
		},
		"AzureSqlDatawarehouse_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "vkserveradf1.database.windows.net"
		},
		"AzureSqlDatawarehouse_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DataWarehouse"
		},
		"AzureSqlDatawarehouse_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladmin"
		},
		"Datalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storageaccountadfpro1.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SQL test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from Lake to SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "Test",
									"wildcardFileName": "Testfile.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDatalakeDelimitedText",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqldbtable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T13:31:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureDatalakeDelimitedText')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqldbtable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StorageTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy Test Storage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "Test",
									"wildcardFileName": "Testfile.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".new"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDatalakeDelimitedText",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureDatalakeDelimitedText",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T10:47:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureDatalakeDelimitedText')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDatabase to Silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prodcuctDatabase to Silver",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Product database to silver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceBronze": {},
									"sinktoSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Product database to silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/productdatabase to Bronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Productdatabase to Bronze",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Product Database to  Bronze",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Productdatabase": {},
									"Productdatabasebronze": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Product Database to  Bronze')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatalakeDelimitedText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "datalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqldbtable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatawarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Testfile"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatawarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatawarehouse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatawarehouse_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatawarehouse_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatawarehouse_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatawarehouse_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Datalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Datalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Datalake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product Database to  Bronze')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "Productdatabase"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "Productdatabasebronze"
						}
					],
					"transformations": [
						{
							"name": "AddLoaddate"
						},
						{
							"name": "Renamecolumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Order ID} as string,",
						"          Product as string,",
						"          {Quantity Ordered} as string,",
						"          {Price Each} as string,",
						"          {Order Date} as string,",
						"          {Purchase Address} as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'Filename',",
						"     format: 'delimited',",
						"     fileSystem: 'datalake',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     wildcardPaths:['Row/ProductFolder/']) ~> Productdatabase",
						"Productdatabase derive({Load Date} = currentDate()) ~> AddLoaddate",
						"AddLoaddate select(mapColumn(",
						"          OrderID = {Order ID},",
						"          Product,",
						"          QuantityOrdered = {Quantity Ordered},",
						"          PriceEach = {Price Each},",
						"          OrderDate = {Order Date},",
						"          PurchaseAddress = {Purchase Address},",
						"          Filename,",
						"          LoadDate = {Load Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Renamecolumns",
						"Renamecolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     folderPath: 'Bronze/Productfolder',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Productdatabasebronze"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product database to silver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sourceBronze"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sinktoSilver"
						}
					],
					"transformations": [
						{
							"name": "filterorderid"
						},
						{
							"name": "Changedatatype"
						},
						{
							"name": "Removeduplicates"
						},
						{
							"name": "AddAddressparts"
						},
						{
							"name": "selectfinalcolumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          Product as string,",
						"          QuantityOrdered as string,",
						"          PriceEach as string,",
						"          OrderDate as string,",
						"          PurchaseAddress as string,",
						"          Filename as string,",
						"          LoadDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     wildcardPaths:['Bronze/Productfolder']) ~> sourceBronze",
						"sourceBronze filter(isInteger(OrderID)) ~> filterorderid",
						"Removeduplicates cast(output(",
						"          OrderID as integer,",
						"          QuantityOrdered as integer,",
						"          PriceEach as double,",
						"          OrderDate as timestamp 'MM/dd/yy HH:mm'",
						"     ),",
						"     errors: true) ~> Changedatatype",
						"filterorderid aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> Removeduplicates",
						"Changedatatype derive(PurchaseStreet = trim(at(split(PurchaseAddress, ','),1)),",
						"          Purchasecity = trim(at(split(PurchaseAddress, ','),2)),",
						"          PurchaseState = trim(at(split(\r",
						"trim(at(split(PurchaseAddress, ','),3))\r",
						",' '),1)),",
						"          PurchaseZipcode = trim(at(split( trim(at(split(PurchaseAddress, ','),3)) ,' '),2))) ~> AddAddressparts",
						"AddAddressparts select(mapColumn(",
						"          OrderID,",
						"          Product,",
						"          QuantityOrdered,",
						"          PriceEach,",
						"          OrderDate,",
						"          PurchaseStreet,",
						"          Purchasecity,",
						"          PurchaseState,",
						"          PurchaseZipcode,",
						"          Filename,",
						"          LoadDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectfinalcolumns",
						"selectfinalcolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     folderPath: 'Silver/ProductDatabase',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktoSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductdatabasetogoldProduct')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSilver"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "Goldsink"
						}
					],
					"transformations": [
						{
							"name": "CreatedimensionData"
						},
						{
							"name": "createDimensionID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as integer,",
						"          Product as string,",
						"          QuantityOrdered as integer,",
						"          PriceEach as double,",
						"          OrderDate as timestamp,",
						"          PurchaseStreet as string,",
						"          Purchasecity as string,",
						"          PurchaseState as string,",
						"          PurchaseZipcode as string,",
						"          Filename as string,",
						"          LoadDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     wildcardPaths:['Silver/ProductDatabase/']) ~> sourceSilver",
						"sourceSilver aggregate(groupBy(Product),",
						"     PriceEach = last(PriceEach)) ~> CreatedimensionData",
						"CreatedimensionData keyGenerate(output(ProductID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> createDimensionID",
						"createDimensionID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     folderPath: 'Gold/ProductDatabase/Product',",
						"     truncate: true,",
						"     partitionFileNames:['Product.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Goldsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductdatabasetoGold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ToGoldProduct",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProductdatabasetogoldProduct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSilver": {},
									"Goldsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ToFileStore",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProductdatabasetogoldFilestore",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSilver": {},
									"Goldsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ToPurchaseAddress",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProductdatabasetogoldPurchaseAddres",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSilver": {},
									"Goldsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ToSalesorderfact",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ToFileStore",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ToGoldProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ToPurchaseAddress",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProductdatabasetogoldSalesOrder",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSilver": {},
									"sinkFilesource": {},
									"sinkpurchaseAddress": {},
									"sinkProduct": {},
									"sinkorderfact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ProductdatabasetogoldProduct')]",
				"[concat(variables('factoryId'), '/dataflows/ProductdatabasetogoldFilestore')]",
				"[concat(variables('factoryId'), '/dataflows/ProductdatabasetogoldPurchaseAddres')]",
				"[concat(variables('factoryId'), '/dataflows/ProductdatabasetogoldSalesOrder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductdatabasetogoldPurchaseAddres')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSilver"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "Goldsink"
						}
					],
					"transformations": [
						{
							"name": "CreatedimensionData"
						},
						{
							"name": "createDimensionID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as integer,",
						"          Product as string,",
						"          QuantityOrdered as integer,",
						"          PriceEach as double,",
						"          OrderDate as timestamp,",
						"          PurchaseStreet as string,",
						"          Purchasecity as string,",
						"          PurchaseState as string,",
						"          PurchaseZipcode as string,",
						"          Filename as string,",
						"          LoadDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     wildcardPaths:['Silver/ProductDatabase/']) ~> sourceSilver",
						"sourceSilver aggregate(groupBy(PurchaseStreet,",
						"          Purchasecity,",
						"          PurchaseState),",
						"     PurchaseZipcode = last(PurchaseZipcode)) ~> CreatedimensionData",
						"CreatedimensionData keyGenerate(output(PurchaseAddressID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> createDimensionID",
						"createDimensionID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     folderPath: 'Gold/ProductDatabase/PurchaseAddress',",
						"     truncate: true,",
						"     partitionFileNames:['PurchaseAddress.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Goldsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductdatabasetogoldFilestore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSilver"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "Goldsink"
						}
					],
					"transformations": [
						{
							"name": "CreatedimensionData"
						},
						{
							"name": "createDimensionID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as integer,",
						"          Product as string,",
						"          QuantityOrdered as integer,",
						"          PriceEach as double,",
						"          OrderDate as timestamp,",
						"          PurchaseStreet as string,",
						"          Purchasecity as string,",
						"          PurchaseState as string,",
						"          PurchaseZipcode as string,",
						"          Filename as string,",
						"          LoadDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     wildcardPaths:['Silver/ProductDatabase/']) ~> sourceSilver",
						"sourceSilver aggregate(groupBy(Filename),",
						"     LoadDate = last(LoadDate)) ~> CreatedimensionData",
						"CreatedimensionData keyGenerate(output(FilestoreID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> createDimensionID",
						"createDimensionID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     folderPath: 'Gold/ProductDatabase/Filestore',",
						"     truncate: true,",
						"     partitionFileNames:['Filestore.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Goldsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductdatabasetogoldSalesOrder')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSilver"
						},
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sinkFilesource"
						},
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sinkpurchaseAddress"
						},
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProduct"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sinkorderfact"
						}
					],
					"transformations": [
						{
							"name": "joinFileSource"
						},
						{
							"name": "joinPurchaseAddress"
						},
						{
							"name": "joinProduct"
						},
						{
							"name": "Salesordercolumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as integer,",
						"          Product as string,",
						"          QuantityOrdered as integer,",
						"          PriceEach as double,",
						"          OrderDate as timestamp,",
						"          PurchaseStreet as string,",
						"          Purchasecity as string,",
						"          PurchaseState as string,",
						"          PurchaseZipcode as string,",
						"          Filename as string,",
						"          LoadDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     wildcardPaths:['Silver/ProductDatabase/']) ~> sourceSilver",
						"source(output(",
						"          Filename as string,",
						"          LoadDate as date,",
						"          FilestoreID as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     wildcardPaths:['Gold/ProductDatabase/Filestore']) ~> sinkFilesource",
						"source(output(",
						"          PurchaseStreet as string,",
						"          Purchasecity as string,",
						"          PurchaseState as string,",
						"          PurchaseZipcode as string,",
						"          PurchaseAddressID as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     wildcardPaths:['Gold/ProductDatabase/PurchaseAddress/']) ~> sinkpurchaseAddress",
						"source(output(",
						"          Product as string,",
						"          PriceEach as double,",
						"          ProductID as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     wildcardPaths:['Gold/ProductDatabase/Product/']) ~> sinkProduct",
						"sourceSilver, sinkFilesource join(sourceSilver@Filename == sinkFilesource@Filename",
						"     && sourceSilver@LoadDate == sinkFilesource@LoadDate,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFileSource",
						"joinFileSource, sinkpurchaseAddress join(sourceSilver@PurchaseStreet == sinkpurchaseAddress@PurchaseStreet",
						"     && sourceSilver@Purchasecity == sinkpurchaseAddress@Purchasecity",
						"     && sourceSilver@PurchaseState == sinkpurchaseAddress@PurchaseState",
						"     && sourceSilver@PurchaseZipcode == sinkpurchaseAddress@PurchaseZipcode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinPurchaseAddress",
						"joinPurchaseAddress, sinkProduct join(sourceSilver@Product == sinkProduct@Product,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProduct",
						"joinProduct select(mapColumn(",
						"          OrderID,",
						"          ProductID,",
						"          QuantityOrdered,",
						"          OrderDate,",
						"          PriceEach = sourceSilver@PriceEach,",
						"          PurchaseAddressID,",
						"          FilestoreID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Salesordercolumn",
						"Salesordercolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     folderPath: 'Gold/ProductDatabase/Salesorderfact',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkorderfact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datalake')]"
			]
		}
	]
}